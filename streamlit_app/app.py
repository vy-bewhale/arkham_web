# Streamlit application entry point 
import streamlit as st
st.set_page_config(layout="wide", page_title="Arkham Client Explorer")
import pandas as pd
import os
import time # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç time
from dotenv import load_dotenv
import arkham_service # –ú–æ–¥—É–ª—å —Å –ª–æ–≥–∏–∫–æ–π Arkham
from typing import List, Dict, Any, Tuple, Optional, Set # –ù—É–∂–µ–Ω typing –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Ç–∏–ø–æ–≤
from streamlit_local_storage import LocalStorage
import json

WHITELIST_KEYS = [
    'lookback_cache_input', 'min_usd_cache_input', 'limit_cache_input',
    'min_usd_query_input', 'lookback_query_input', 'token_symbols_multiselect',
    'from_address_names_multiselect', 'to_address_names_multiselect',
    'limit_query_input',
    'auto_refresh_enabled', 'auto_refresh_interval',
    'cache_initialized_flag', 'known_tokens', 'known_addresses',
    'detailed_token_info', 'detailed_address_info',
    'api_key_loaded', 'error_message', 'api_params_debug',
    'initialized'
]

localS = LocalStorage()

def initialize_session_state():
    if 'initialized' not in st.session_state:
        dotenv_path = os.path.join(os.path.dirname(__file__), '..', '.env') 
        load_dotenv(dotenv_path=dotenv_path)
        api_key = os.getenv("ARKHAM_API_KEY")
        st.session_state.api_key = api_key
        st.session_state.api_key_loaded = bool(api_key)
        st.session_state.arkham_monitor = None
        st.session_state.error_message = None
        st.session_state.cache_initialized_flag = False
        st.session_state.known_tokens = []
        st.session_state.known_addresses = []
        st.session_state.transactions_df = pd.DataFrame() 
        st.session_state.detailed_token_info = {}
        st.session_state.detailed_address_info = {}
        st.session_state.lookback_cache_input = '7d'
        st.session_state.min_usd_cache_input = 10000.0 
        st.session_state.limit_cache_input = 1000
        st.session_state.min_usd_query_input = 1000000.0 
        st.session_state.lookback_query_input = '7d'
        st.session_state.token_symbols_multiselect = []
        st.session_state.from_address_names_multiselect = []
        st.session_state.to_address_names_multiselect = []
        st.session_state.limit_query_input = 50
        st.session_state.auto_refresh_enabled = False
        st.session_state.auto_refresh_interval = 60
        st.session_state.initialized = True
    if ('arkham_monitor' not in st.session_state or st.session_state.arkham_monitor is None) and \
       (st.session_state.get('api_key') or os.getenv("ARKHAM_API_KEY")):
        api_key = st.session_state.get('api_key') or os.getenv("ARKHAM_API_KEY")
        try:
            st.session_state.arkham_monitor = arkham_service.create_monitor(api_key)
        except Exception as e:
            st.session_state.arkham_monitor = None
        if st.session_state.arkham_monitor is None:
            st.session_state.api_key_loaded = False
            st.session_state.error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Arkham Monitor. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏."

def load_app_settings():
    if "app_state_loaded" not in st.session_state:
        try:
            raw_state = localS.getItem("app_state")
            if raw_state:
                state_dict = json.loads(raw_state)
                if state_dict.get("state_version") == 1:
                    for k in WHITELIST_KEYS:
                        if k in state_dict:
                            st.session_state[k] = state_dict[k]
            st.session_state.app_state_loaded = True
        except Exception as e:
            st.session_state.app_state_loaded = True

def save_app_settings():
    try:
        state_to_save = {k: st.session_state.get(k) for k in WHITELIST_KEYS if k in st.session_state}
        for k in ['detailed_token_info', 'detailed_address_info']:
            if k in state_to_save and isinstance(state_to_save[k], dict):
                for subk, v in state_to_save[k].items():
                    if isinstance(v, set):
                        state_to_save[k][subk] = list(v)
        state_to_save["state_version"] = 1
        localS.setItem("app_state", json.dumps(state_to_save, ensure_ascii=False))
    except Exception:
        pass

def load_arkham_cache(arkham_monitor):
    if "arkham_cache_loaded" not in st.session_state and arkham_monitor is not None:
        try:
            raw_cache = localS.getItem("arkham_cache")
            if raw_cache:
                cache_dict = json.loads(raw_cache)
                arkham_monitor.load_full_cache_state(cache_dict)
            st.session_state.arkham_cache_loaded = True
        except Exception as e:
            st.session_state.arkham_cache_loaded = True

def save_arkham_cache(arkham_monitor):
    if arkham_monitor is not None:
        try:
            cache_to_save = arkham_monitor.get_full_cache_state()
            localS.setItem("arkham_cache", json.dumps(cache_to_save, ensure_ascii=False))
        except Exception:
            pass

def handle_populate_cache_button():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ Arkham."""
    if st.session_state.arkham_monitor:
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ session_state, –∫—É–¥–∞ –∏—Ö –∑–∞–ø–∏—Å–∞–ª–∏ –≤–∏–¥–∂–µ—Ç—ã –ø–æ –∫–ª—é—á–∞–º
        lookback = st.session_state.lookback_cache_input
        min_usd = st.session_state.min_usd_cache_input
        limit = st.session_state.limit_cache_input
        
        with st.spinner("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –¥–∞–Ω–Ω—ã—Ö Arkham..."):
            tokens, addresses, error = arkham_service.populate_arkham_cache(
                st.session_state.arkham_monitor, lookback, min_usd, limit
            )
        
        if error:
            st.session_state.error_message = error
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            st.session_state.known_tokens = []
            st.session_state.known_addresses = []
            st.session_state.cache_initialized_flag = False
            st.session_state.detailed_token_info = {} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º
            st.session_state.detailed_address_info = {} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º
        else:
            st.session_state.known_tokens = tokens # –í–æ–∑–≤—Ä–∞—â–∞–µ–º
            st.session_state.known_addresses = addresses # –í–æ–∑–≤—Ä–∞—â–∞–µ–º
            st.session_state.cache_initialized_flag = True
            st.session_state.error_message = None # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
            st.success(f"–ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –∏ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤.") # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            token_details, token_err = arkham_service.get_detailed_token_info(st.session_state.arkham_monitor)
            if token_err:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º: {token_err}")
                st.session_state.detailed_token_info = {} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º
            else:
                st.session_state.detailed_token_info = token_details if token_details is not None else {} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º
            
            address_details, addr_err = arkham_service.get_detailed_address_info(st.session_state.arkham_monitor)
            if addr_err:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ –∞–¥—Ä–µ—Å–∞–º: {addr_err}")
                st.session_state.detailed_address_info = {} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º
            else:
                st.session_state.detailed_address_info = address_details if address_details is not None else {} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à Arkham —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            save_arkham_cache(st.session_state.arkham_monitor)
        # st.rerun() # –£–±–∏—Ä–∞–µ–º rerun
    else:
        st.session_state.error_message = "Arkham Monitor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à."
        # st.rerun() # –£–±–∏—Ä–∞–µ–º rerun

def handle_auto_refresh_toggle():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ñ–ª–∞–≥)."""
    # –õ–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ —É–¥–∞–ª–µ–Ω–∞
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ auto_refresh_enabled –º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∏–¥–∂–µ—Ç–æ–º st.toggle
    pass # –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π –∏–ª–∏ –µ–µ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ on_change –Ω–µ –Ω—É–∂–µ–Ω 
         # –û—Å—Ç–∞–≤–∏–º –ø–æ–∫–∞ pass –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏, —á—Ç–æ on_change –±—ã–ª, –Ω–æ –ª–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.
         # –ò–ª–∏ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å on_change –∏–∑ st.toggle –Ω–∏–∂–µ.

def _fetch_and_update_table():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç session_state."""
    if not st.session_state.arkham_monitor:
        st.session_state.error_message = "Arkham Monitor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
        st.session_state.transactions_df = pd.DataFrame() # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        st.toast("–û—à–∏–±–∫–∞: –ú–æ–Ω–∏—Ç–æ—Ä Arkham –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.", icon="üö®")
        return

    if not st.session_state.cache_initialized_flag:
        st.warning("–í–Ω–∏–º–∞–Ω–∏–µ: –ö–µ—à –∞–¥—Ä–µ—Å–æ–≤ –∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–º–µ–Ω–∞–º –∏ —Ç–æ–∫–µ–Ω–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π.")

    filter_params = {
        'min_usd': st.session_state.min_usd_query_input,
        'lookback': st.session_state.lookback_query_input,
        'token_symbols': st.session_state.token_symbols_multiselect,
        'from_address_names': st.session_state.from_address_names_multiselect,
        'to_address_names': st.session_state.to_address_names_multiselect
    }
    query_limit = st.session_state.limit_query_input

    with st.spinner("–ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π..."):
        df, error, api_params_debug = arkham_service.fetch_transactions(
            st.session_state.arkham_monitor, filter_params, query_limit
        )
    
    st.session_state.api_params_debug = api_params_debug 
    
    if error:
        st.session_state.error_message = error
        st.session_state.transactions_df = pd.DataFrame() 
        st.toast(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {error}", icon="üö®")
    else:
        st.session_state.transactions_df = df if df is not None else pd.DataFrame()
        st.session_state.error_message = None 

        if st.session_state.arkham_monitor:
            updated_tokens = st.session_state.arkham_monitor.get_known_token_symbols()
            updated_addresses = st.session_state.arkham_monitor.get_known_address_names()

            if set(st.session_state.get('known_tokens', [])) != set(updated_tokens):
                st.session_state.known_tokens = updated_tokens
            
            if set(st.session_state.get('known_addresses', [])) != set(updated_addresses):
                st.session_state.known_addresses = updated_addresses

            token_details, token_err = arkham_service.get_detailed_token_info(st.session_state.arkham_monitor)
            if token_err:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞: {token_err}")
            else:
                st.session_state.detailed_token_info = token_details if token_details is not None else {}
            
            address_details, addr_err = arkham_service.get_detailed_address_info(st.session_state.arkham_monitor)
            if addr_err:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ –∞–¥—Ä–µ—Å–∞–º –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞: {addr_err}")
            else:
                st.session_state.detailed_address_info = address_details if address_details is not None else {}
            
            save_arkham_cache(st.session_state.arkham_monitor)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∫–µ—à –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not st.session_state.cache_initialized_flag and (updated_tokens or updated_addresses):
                 st.session_state.cache_initialized_flag = True


        if st.session_state.transactions_df.empty:
            st.info("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            pass

def handle_fetch_transactions_button():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"."""
    _fetch_and_update_table() # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    # st.rerun() # –£–±–∏—Ä–∞–µ–º rerun

def render_sidebar():
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å."""

    with st.sidebar.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏ –ö–µ—à–∞", expanded=False):
        st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ –¥–ª—è –∫–µ—à–∞", 
            ['24h', '7d', '30d'], 
            key='lookback_cache_input', 
            help="–ü–µ—Ä–∏–æ–¥ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à (–∞–¥—Ä–µ—Å–∞, —Ç–æ–∫–µ–Ω—ã)."
        )
        # Value —É–±—Ä–∞–Ω
        st.number_input(
            "–ú–∏–Ω. USD –¥–ª—è –∫–µ—à–∞", 
            min_value=0.0,
            step=1000.0, 
            key='min_usd_cache_input',
            format="%.0f",
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ USD –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–µ—à–∞."
        )
        # Value —É–±—Ä–∞–Ω
        st.number_input(
            "–õ–∏–º–∏—Ç –¥–ª—è –∫–µ—à–∞", 
            min_value=1,
            max_value=5000, 
            step=100, 
            key='limit_cache_input',
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–µ—à–∞."
        )
        st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å/–û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à", on_click=handle_populate_cache_button, key="populate_cache_btn")
    
    with st.sidebar.expander("–§–∏–ª—å—Ç—Ä—ã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", expanded=True):
        # –ò–∑–º–µ–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ [2, 1]
        cols = st.columns([2, 1])
        # Value —É–±—Ä–∞–Ω
        cols[0].number_input(
            "–ú–∏–Ω. —Å—É–º–º–∞ USD", 
            min_value=0.0, 
            step=10000.0, 
            key='min_usd_query_input', 
            format="%.0f",
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ USD –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
        )
        cols[1].selectbox(
            "–ü–µ—Ä–∏–æ–¥", 
            ['1h', '6h', '12h', '24h', '3d', '7d', '30d'], 
            key='lookback_query_input', 
            help="–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."
        )
        # –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–∞
        st.multiselect(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–∫–µ–Ω–∞–º", 
            options=st.session_state.get('known_tokens', []),
            key='token_symbols_multiselect',
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã —Ç–æ–∫–µ–Ω–æ–≤. –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞."
        )
        st.multiselect(
            "–§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é", 
            options=st.session_state.get('known_addresses', []),
            key='from_address_names_multiselect',
            help="–í—ã–±–µ—Ä–∏—Ç–µ –∏–º–µ–Ω–∞/–∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π. –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞."
        )
        st.multiselect(
            "–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é", 
            options=st.session_state.get('known_addresses', []),
            key='to_address_names_multiselect',
            help="–í—ã–±–µ—Ä–∏—Ç–µ –∏–º–µ–Ω–∞/–∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π. –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞."
        )
        # Value —É–±—Ä–∞–Ω
        st.number_input(
            "–õ–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ", 
            min_value=1, 
            max_value=1000, 
            step=10, 
            key='limit_query_input', 
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ."
        )
        st.button("–ù–∞–π—Ç–∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", on_click=handle_fetch_transactions_button, key="fetch_transactions_btn")

    with st.sidebar.expander("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"):
        st.toggle(
            "–í–∫–ª—é—á–∏—Ç—å", 
            key='auto_refresh_enabled', 
            # on_change=handle_auto_refresh_toggle, # –£–±–∏—Ä–∞–µ–º on_change, —Ç.–∫. –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –≤ main
            help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."
        )
        st.number_input(
            "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫)", 
            min_value=10, 
            step=10, 
            key='auto_refresh_interval', 
            help="–ö–∞–∫ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–∞–±–ª–∏—Ü—É (–º–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥).",
            # disabled=st.session_state.get('auto_refresh_running', False) # –£–±–∏—Ä–∞–µ–º disabled, —Ç.–∫. –Ω–µ—Ç auto_refresh_running
        )

def render_main_content():
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    # st.title("Arkham Client Explorer") # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏–∑ session_state, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–Ω–æ–ø–∫–∞–º–∏
    if st.session_state.get('error_message'):
        st.error(st.session_state.error_message)
        st.session_state.error_message = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç—É—Å
    if st.session_state.get('api_key_loaded') and st.session_state.get('arkham_monitor'):
        if not st.session_state.get('cache_initialized_flag'):
            st.info("–î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–µ—à–∞ (–∏–º–µ–Ω–∞ –∞–¥—Ä–µ—Å–æ–≤, —Å–∏–º–≤–æ–ª—ã —Ç–æ–∫–µ–Ω–æ–≤) –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —Å–∞–π–¥–±–∞—Ä–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
    else:
        # –û—à–∏–±–∫–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∞ –≤ main() –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        st.error("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ API –∫–ª—é—á–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞.")
        return # –ù–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –¥–∞–ª—å—à–µ, –µ—Å–ª–∏ –Ω–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞
        
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    transactions_df = st.session_state.get('transactions_df', pd.DataFrame())
    if not transactions_df.empty:
        with st.expander("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", expanded=True):
            st.dataframe(
                transactions_df, 
                use_container_width=True,
                height=600,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Ç–∞–±–ª–∏—Ü—ã
                column_config={
                    "–û—Ç–∫—É–¥–∞": st.column_config.TextColumn(width="medium"),
                    "–ö—É–¥–∞": st.column_config.TextColumn(width="medium")
                }
            )
    # –°–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ handle_fetch_transactions_button —á–µ—Ä–µ–∑ st.info, 
    # –∑–¥–µ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–µ —Ö–æ—Ç–∏–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ö–µ—à–µ
    with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ (–∞–¥—Ä–µ—Å–∞ –∏ —Ç–æ–∫–µ–Ω—ã)", expanded=False):
        known_tokens_list = st.session_state.get('known_tokens', [])
        known_addresses_list = st.session_state.get('known_addresses', [])
        cache_initialized = st.session_state.get('cache_initialized_flag', False)

        tab1, tab2, tab3 = st.tabs(["–°–≤–æ–¥–∫–∞", "–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ê–¥—Ä–µ—Å–∞", "–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –¢–æ–∫–µ–Ω—ã"])

        with tab1: # –°–≤–æ–¥–∫–∞
            if not cache_initialized:
                st.info("–ö–µ—à –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ü–∏—é –≤ —Å–∞–π–¥–±–∞—Ä–µ.")
            else:
                detailed_addresses_count = len(st.session_state.get('detailed_address_info', {}))
                detailed_tokens_count = len(st.session_state.get('detailed_token_info', {}))
                st.write(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω/–∞–¥—Ä–µ—Å–æ–≤ –≤ –∫–µ—à–µ: {len(known_addresses_list)} (–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {detailed_addresses_count})")
                st.write(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–µ—à–µ: {len(known_tokens_list)} (–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {detailed_tokens_count})")
                if not known_addresses_list and not known_tokens_list:
                    st.write("–ö–µ—à –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö (0 –∞–¥—Ä–µ—Å–æ–≤, 0 —Ç–æ–∫–µ–Ω–æ–≤).")

        with tab2: # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ê–¥—Ä–µ—Å–∞
            if not cache_initialized:
                st.info("–ö–µ—à –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –î–∞–Ω–Ω—ã–µ –æ–± –∞–¥—Ä–µ—Å–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            elif not known_addresses_list:
                st.info("–°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –∫–µ—à –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞.")
            else:
                # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è DataFrame
                data_for_addresses_df = []
                detailed_address_info = st.session_state.get('detailed_address_info', {})
                for name in known_addresses_list: # known_addresses_list —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ –∫–µ—à–∞
                    count = detailed_address_info.get(name, 0) # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ID
                    data_for_addresses_df.append({"–ê–¥—Ä–µ—Å/–ò–º—è": name, "–ö–æ–ª-–≤–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö ID": count})
                
                df_addresses = pd.DataFrame(data_for_addresses_df)
                st.dataframe(df_addresses, use_container_width=True, height=300)
        
        with tab3: # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –¢–æ–∫–µ–Ω—ã
            if not cache_initialized:
                st.info("–ö–µ—à –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            elif not known_tokens_list:
                st.info("–°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –∫–µ—à –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞.")
            else:
                # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è DataFrame
                data_for_tokens_df = []
                detailed_token_info = st.session_state.get('detailed_token_info', {})
                for symbol in known_tokens_list: # known_tokens_list —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ –∫–µ—à–∞
                    ids_set = detailed_token_info.get(symbol, set())
                    ids_str = ", ".join(sorted(list(ids_set))) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–≤
                    count_ids = len(ids_set)
                    # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å: —Å–∞–º–∏ ID –∏–ª–∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∏–ª–∏ –∏ —Ç–æ –∏ –¥—Ä—É–≥–æ–µ
                    data_for_tokens_df.append({"–°–∏–º–≤–æ–ª –¢–æ–∫–µ–Ω–∞": symbol, "ID –¢–æ–∫–µ–Ω–æ–≤": ids_str, "–ö–æ–ª-–≤–æ ID": count_ids})
                
                df_tokens = pd.DataFrame(data_for_tokens_df)
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏, —á—Ç–æ–±—ã ID –±—ã–ª–∏ –≤–∏–¥–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –¥–ª–∏–Ω–Ω—ã–µ
                st.dataframe(
                    df_tokens, 
                    use_container_width=True, 
                    height=300,
                    column_config={
                        "ID –¢–æ–∫–µ–Ω–æ–≤": st.column_config.TextColumn(width="large")
                    }
                )

def main():
    load_app_settings()
    initialize_session_state()
    if st.session_state.get('arkham_monitor') is not None:
        load_arkham_cache(st.session_state.arkham_monitor)
    if st.session_state.get('error_message') and not st.session_state.get('arkham_monitor'):
        st.error(st.session_state.error_message)
        st.session_state.error_message = None
        st.stop()
    elif not st.session_state.get('api_key_loaded', False):
        current_error = st.session_state.get('error_message', "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ARKHAM_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
        st.error(current_error)
        st.session_state.error_message = None
        st.stop()
    render_sidebar()
    render_main_content()
    if st.session_state.get('auto_refresh_enabled', False):
        interval = st.session_state.get('auto_refresh_interval', 60)
        placeholder = st.empty()
        placeholder.info(f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ {interval} —Å–µ–∫...")
        time.sleep(interval)
        placeholder.empty()
        _fetch_and_update_table()
        st.rerun()
    save_app_settings()

if __name__ == "__main__":
    # load_custom_css("assets/style.css") # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—é–¥–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–¥–µ—Å—å —Ä–∞–Ω–µ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ
    main() 