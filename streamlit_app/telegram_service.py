import os
import requests
import html
import time
import re # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç re –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
from typing import Optional, Dict, Any
import pandas as pd
# from dotenv import load_dotenv # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ

# –£–î–ê–õ–ï–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è

# –£–î–ê–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è get_telegram_token()

def _escape_html(text: Optional[str]) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å—Ç—Ä–æ–∫—É."""
    if text is None:
        return ""
    # –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º –ø–µ—Ä–µ–¥ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    return html.escape(str(text).strip())

def format_telegram_message(transaction_row: pd.Series) -> Optional[str]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram."""
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        time_str_raw = transaction_row.get("–í—Ä–µ–º—è", "N/A")
        network_str_raw = transaction_row.get("–°–µ—Ç—å", "N/A")
        from_str_raw = transaction_row.get("–û—Ç–∫—É–¥–∞", "N/A")
        to_str_raw = transaction_row.get("–ö—É–¥–∞", "N/A")
        token_symbol_raw = transaction_row.get("–°–∏–º–≤–æ–ª", "N/A")
        usd_amount_raw = transaction_row.get("USD", None) # –ü–æ–ª—É—á–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –º.–±. None –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ
        tx_id_raw = transaction_row.get("TxID", None)

        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        time_str = _escape_html(time_str_raw)
        network_str = _escape_html(network_str_raw)
        token_symbol_str = _escape_html(token_symbol_raw)
        
        # ---- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ ----
        message_icon = "üåê" # –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        token_symbol_lower = str(token_symbol_raw).lower() if token_symbol_raw else ""
        if 'usd' in token_symbol_lower:
            message_icon = "üí≤"
        elif 'eth' in token_symbol_lower:
            message_icon = "üíé"
        elif 'btc' in token_symbol_lower or 'bitcoin' in token_symbol_lower:
            message_icon = "üí∞"
        # ---- –ö–æ–Ω–µ—Ü –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ ----
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ TxID
        tx_id_str = None
        if tx_id_raw and not pd.isna(tx_id_raw) and str(tx_id_raw).strip() != 'N/A':
             tx_id_str = _escape_html(str(tx_id_raw)) # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º TxID —Ç–æ–∂–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

        if not tx_id_str:
            print("Warning: Valid TxID is missing, cannot format Telegram message.")
            return None

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ USD: –ø—Ä–æ—Å—Ç–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
        usd_amount_formatted = "N/A"
        if usd_amount_raw is not None and not pd.isna(usd_amount_raw):
            usd_amount_formatted = _escape_html(str(usd_amount_raw))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –û—Ç–∫—É–¥–∞/–ö—É–¥–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º CEX/DEX
        def highlight_cex_dex(text_raw):
            if not isinstance(text_raw, str):
                return _escape_html(text_raw) # –ü—Ä–æ—Å—Ç–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞
            
            escaped_text = _escape_html(text_raw)
            
            # –ó–∞–º–µ–Ω–∞ CEX/DEX –Ω–∞ <b>CEX</b>/<b>DEX</b> –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞, –Ω–æ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Å–ª–æ–≤–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–º–µ–Ω—ã, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä —Å–ª–æ–≤–∞ CEX/DEX –µ—Å–ª–∏ –Ω—É–∂–Ω–æ,
            # –Ω–æ –ø—Ä–æ—â–µ —Å–¥–µ–ª–∞—Ç—å –∏—Ö –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –≤ —Ç–µ–≥–µ <b>
            def replace_match(match):
                 word = match.group(0)
                 # return f'<b>{word}</b>' # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä
                 return f'<b>{word.upper()}</b>' # –î–µ–ª–∞–µ—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏
                 
            highlighted_text = re.sub(r'\b(cex|dex)\b', replace_match, escaped_text, flags=re.IGNORECASE)
            return highlighted_text

        from_str_formatted = highlight_cex_dex(from_str_raw)
        to_str_formatted = highlight_cex_dex(to_str_raw)
            
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è
        message_html = (
            f"{message_icon} <b>{usd_amount_formatted}</b> <b>{token_symbol_str}</b> ({network_str})\n"
            f"<b>From:</b> {from_str_formatted}\n"
            f"<b>To:</b> {to_str_formatted}\n"
            f"<i>{time_str}</i>\n"
            f"üîó <a href=\"https://platform.arkhamintelligence.com/explorer/tx/{tx_id_str}\">View on Arkham</a>"
        )
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª—É—á–∞–π–Ω–æ –æ–±—Ä–∞–∑–æ–≤–∞–ª–∏—Å—å
        return message_html.strip() 
        
    except Exception as e:
        print(f"Error formatting telegram message: {e}")
        # –î–æ–±–∞–≤–∏–º –≤—ã–≤–æ–¥ —Å–∞–º–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"Row data causing error: {transaction_row.to_dict()}")
        return None

def send_telegram_alert(bot_token: str, chat_id: str, message_html: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞."""
    api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': message_html,
        'parse_mode': 'HTML',
        'disable_web_page_preview': True
    }
    try:
        response = requests.post(api_url, data=payload, timeout=10) # –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)
        response_data = response.json()
        if response_data.get('ok'):
            return True
        else:
            print(f"Telegram API error: {response_data.get('description')}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"Network error sending Telegram alert: {e}")
        return False
    except Exception as e:
        print(f"Unexpected error sending Telegram alert: {e}")
        return False

# –£–î–ê–õ–ï–ù–û: –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ get_telegram_token() —É–¥–∞–ª–µ–Ω–∞
# if __name__ == '__main__':
# ... 